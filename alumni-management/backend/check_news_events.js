const mysql = require('mysql2/promise');

async function checkNewsAndEvents() {
    const connection = await mysql.createConnection({
        host: 'localhost', 
        user: 'root', 
        password: '', 
        database: 'alumni_db'
    });
    
    console.log('=== ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ===');
    const [news] = await connection.execute(`
        SELECT n.id, n.title, n.created_at, u.name as author_name 
        FROM news n 
        LEFT JOIN users u ON n.author_id = u.id 
        ORDER BY n.created_at DESC
    `);
    news.forEach((item, index) => {
        console.log(`${index + 1}. ${item.title}`);
        console.log(`   ‡πÇ‡∏î‡∏¢: ${item.author_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} | ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${item.created_at.toLocaleDateString('th-TH')}`);
        console.log('');
    });
    
    console.log('=== ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ===');
    const [events] = await connection.execute(`
        SELECT e.id, e.title, e.event_date, e.location,
               COUNT(er.user_id) as registered_count
        FROM events e 
        LEFT JOIN event_registrations er ON e.id = er.event_id
        GROUP BY e.id, e.title, e.event_date, e.location
        ORDER BY e.event_date ASC
    `);
    events.forEach((event, index) => {
        const eventDate = new Date(event.event_date);
        console.log(`${index + 1}. ${event.title}`);
        console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${eventDate.toLocaleDateString('th-TH')} ‡πÄ‡∏ß‡∏•‡∏≤ ${eventDate.toLocaleTimeString('th-TH', {hour: '2-digit', minute: '2-digit'})}`);
        console.log(`   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${event.location}`);
        console.log(`   ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß: ${event.registered_count} ‡∏Ñ‡∏ô`);
        console.log('');
    });
    
    console.log('=== ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ===');
    const [registrationStats] = await connection.execute(`
        SELECT e.title as event_title, u.name as user_name, er.registered_at
        FROM event_registrations er
        JOIN events e ON er.event_id = e.id
        JOIN users u ON er.user_id = u.id
        ORDER BY e.title, er.registered_at
    `);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    const groupedRegistrations = {};
    registrationStats.forEach(reg => {
        if (!groupedRegistrations[reg.event_title]) {
            groupedRegistrations[reg.event_title] = [];
        }
        groupedRegistrations[reg.event_title].push(reg.user_name);
    });
    
    Object.keys(groupedRegistrations).forEach(eventTitle => {
        console.log(`üìÖ ${eventTitle}`);
        console.log(`   ‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ${groupedRegistrations[eventTitle].join(', ')}`);
        console.log('');
    });
    
    console.log('=== ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° ===');
    const [overallStats] = await connection.execute(`
        SELECT 
            (SELECT COUNT(*) FROM news) as total_news,
            (SELECT COUNT(*) FROM events) as total_events,
            (SELECT COUNT(*) FROM event_registrations) as total_registrations,
            (SELECT COUNT(DISTINCT user_id) FROM event_registrations) as unique_participants
    `);
    
    const stats = overallStats[0];
    console.log(`üì∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.total_news} ‡∏Ç‡πà‡∏≤‡∏ß`);
    console.log(`üéâ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.total_events} ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°`);
    console.log(`üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.total_registrations} ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô`);
    console.log(`üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥: ${stats.unique_participants} ‡∏Ñ‡∏ô`);
    
    await connection.end();
}

checkNewsAndEvents().catch(console.error);