const mysql = require('mysql2/promise');

async function checkPostsAndComments() {
    const connection = await mysql.createConnection({
        host: 'localhost', 
        user: 'root', 
        password: '', 
        database: 'alumni_db'
    });
    
    console.log('=== ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ===');
    const [posts] = await connection.execute(`
        SELECT p.id, p.title, p.status, u.name as author_name, p.created_at,
               COUNT(c.id) as comment_count
        FROM posts p 
        LEFT JOIN users u ON p.user_id = u.id 
        LEFT JOIN comments c ON p.id = c.post_id
        GROUP BY p.id, p.title, p.status, u.name, p.created_at
        ORDER BY p.created_at DESC
    `);
    
    posts.forEach((post, index) => {
        const statusIcon = post.status === 'active' ? 'üü¢' : 
                          post.status === 'pending' ? 'üü°' : 'üî¥';
        console.log(`${index + 1}. ${statusIcon} ${post.title}`);
        console.log(`   ‡πÇ‡∏î‡∏¢: ${post.author_name} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô: ${post.comment_count} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô`);
        console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${post.created_at.toLocaleDateString('th-TH')}`);
        console.log('');
    });
    
    console.log('=== ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ===');
    const [comments] = await connection.execute(`
        SELECT c.id, c.content, c.parent_comment_id, 
               u.name as commenter_name, p.title as post_title,
               c.created_at
        FROM comments c
        JOIN users u ON c.user_id = u.id
        JOIN posts p ON c.post_id = p.id
        ORDER BY c.post_id, c.parent_comment_id IS NULL DESC, c.created_at ASC
    `);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏û‡∏™‡∏ï‡πå
    const groupedComments = {};
    comments.forEach(comment => {
        if (!groupedComments[comment.post_title]) {
            groupedComments[comment.post_title] = {
                main_comments: [],
                replies: []
            };
        }
        
        if (comment.parent_comment_id === null) {
            groupedComments[comment.post_title].main_comments.push(comment);
        } else {
            groupedComments[comment.post_title].replies.push(comment);
        }
    });
    
    Object.keys(groupedComments).forEach(postTitle => {
        console.log(`üìù ${postTitle.substring(0, 50)}...`);
        
        const data = groupedComments[postTitle];
        data.main_comments.forEach(comment => {
            console.log(`   üí¨ ${comment.commenter_name}: ${comment.content.substring(0, 60)}...`);
            
            // ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ô‡∏µ‡πâ
            const relatedReplies = data.replies.filter(reply => reply.parent_comment_id === comment.id);
            relatedReplies.forEach(reply => {
                console.log(`      ‚Ü≥ ${reply.commenter_name}: ${reply.content.substring(0, 50)}...`);
            });
        });
        console.log('');
    });
    
    console.log('=== ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏° ===');
    const [userStats] = await connection.execute(`
        SELECT u.name, 
               COUNT(DISTINCT p.id) as posts_count,
               COUNT(DISTINCT c.id) as comments_count,
               (COUNT(DISTINCT p.id) + COUNT(DISTINCT c.id)) as total_activity
        FROM users u
        LEFT JOIN posts p ON u.id = p.user_id
        LEFT JOIN comments c ON u.id = c.user_id
        WHERE u.role = 'user'
        GROUP BY u.id, u.name
        HAVING total_activity > 0
        ORDER BY total_activity DESC
    `);
    
    console.log('üëë ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:');
    userStats.forEach((user, index) => {
        console.log(`${index + 1}. ${user.name}: ${user.posts_count} ‡πÇ‡∏û‡∏™‡∏ï‡πå, ${user.comments_count} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô (‡∏£‡∏ß‡∏° ${user.total_activity} ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°)`);
    });
    
    console.log('\n=== ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ===');
    const topicCategories = {
        '‡∏á‡∏≤‡∏ô': ['‡∏´‡∏≤‡∏á‡∏≤‡∏ô', '‡∏á‡∏≤‡∏ô', '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', 'career', 'job'],
        '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤': ['‡∏™‡∏≠‡∏ô', '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', '‡∏Ñ‡∏≠‡∏£‡πå‡∏™', '‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤'],
        '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à': ['startup', '‡∏Ç‡∏≤‡∏¢', '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à'],
        '‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå': ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï', '‡∏ß‡∏¥‡πà‡∏á', '‡∏£‡πâ‡∏≤‡∏ô'],
        '‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤': ['‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤', '‡∏ä‡πà‡∏ß‡∏¢', '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥']
    };
    
    Object.keys(topicCategories).forEach(category => {
        const keywords = topicCategories[category];
        const categoryPosts = posts.filter(post => 
            keywords.some(keyword => 
                post.title.toLowerCase().includes(keyword.toLowerCase())
            )
        );
        console.log(`${category}: ${categoryPosts.length} ‡πÇ‡∏û‡∏™‡∏ï‡πå`);
    });
    
    console.log('\n=== ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° ===');
    const [overallStats] = await connection.execute(`
        SELECT 
            (SELECT COUNT(*) FROM posts) as total_posts,
            (SELECT COUNT(*) FROM posts WHERE status = 'active') as active_posts,
            (SELECT COUNT(*) FROM posts WHERE status = 'pending') as pending_posts,
            (SELECT COUNT(*) FROM comments WHERE parent_comment_id IS NULL) as main_comments,
            (SELECT COUNT(*) FROM comments WHERE parent_comment_id IS NOT NULL) as replies,
            (SELECT COUNT(DISTINCT user_id) FROM posts) as post_authors,
            (SELECT COUNT(DISTINCT user_id) FROM comments) as commenters
    `);
    
    const stats = overallStats[0];
    console.log(`üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.total_posts} ‡πÇ‡∏û‡∏™‡∏ï‡πå`);
    console.log(`   üü¢ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß: ${stats.active_posts} ‡πÇ‡∏û‡∏™‡∏ï‡πå`);
    console.log(`   üü° ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: ${stats.pending_posts} ‡πÇ‡∏û‡∏™‡∏ï‡πå`);
    console.log(`üí¨ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å: ${stats.main_comments} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô`);
    console.log(`‚Ü©Ô∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ${stats.replies} ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö`);
    console.log(`üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå: ${stats.post_authors} ‡∏Ñ‡∏ô`);
    console.log(`üó£Ô∏è ‡∏ú‡∏π‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô: ${stats.commenters} ‡∏Ñ‡∏ô`);
    
    await connection.end();
}

checkPostsAndComments().catch(console.error);